name: Create Infrastructure EKS (Kubernetes)

on:
  workflow_dispatch:

jobs:
  terraform-apply-infra:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS CLI credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID_MEL }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY_MEL }}
          aws-region: us-east-1

      - name: Setup Kubectl
        uses: Azure/setup-kubectl@v3

      - name: Setup Terraform
        uses: hashicorp/setup-terraform@v2.0.3

      - run: terraform -chdir="./env/dev" init

      - run: terraform -chdir="./env/dev" apply -auto-approve

      - name: Configure kubeconfig with cluster aws
        run: |
          echo "Configuring EKS cluster"
          aws eks update-kubeconfig --name fiap-aws-eks2 --region us-east-1
        if: success()

      - name: Configuring Secrets on Kubernetes
        run: |
          kubectl delete secret db --ignore-not-found
          kubectl delete secret mp --ignore-not-found
          
          kubectl create secret generic mp --from-literal=user-id="${{secrets.MERCADO_PAGO_USER_ID}}" --from-literal=external-id="${{secrets.MERCADO_PAGO_EXTERNAL_ID}}" --from-literal=token="${{secrets.MERCADO_PAGO_TOKEN}}" --from-literal=webhook-url="${{secrets.MERCADO_PAGO_WEBHOOK_URL}}"
          kubectl create secret generic db --from-literal=username="${{secrets.MYSQL_ROOT_USERNAME}}" --from-literal=password="${{secrets.MYSQL_ROOT_PASSWORD}}"
        if: success()

      - name: Configuring Infra Kubernetes
        run: |
          kubectl apply -f ./kubernetes/api/load-balancer-service.yaml
          kubectl apply -f ./kubernetes/config/db.yaml
          kubectl apply -f ./kubernetes/config/db-migration.yaml
          kubectl apply -f ./kubernetes/db/pod.yaml
          kubectl apply -f ./kubernetes/db/service.yaml
          kubectl apply -f ./kubernetes/api/service.yaml
        if: success()

      - name: Test connection
        run: kubectl get svc
        if: success()